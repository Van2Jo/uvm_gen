<%
module = attributes['module_name']
user = attributes['user_name']
date = attributes['date']
module_upper = attributes['module_name'].upper()

%>

//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  *****
//Auto Generated by UVM-Generator
//Author: ${user}
//date: ${date}
//Contents:${module}_${agent.name}_agent
//***** ***** ***** *****  *****  *****  *****  *****  *****  *****  *****

class ${module}_${agent.name}_agent extends uvm_agent;

	`uvm_component_utils(${module}_${agent.name}_agent)

	//Config	//Interface
	${agent.name}_agent_config agt_cfg;
	virtual ${module}_${agent.name}_inf ${agent.name}_inf;
	
	//TLM 
	uvm_analysis_port#(${agent.name}_req) mon_ap;
	
	//Components
	${module}_${agent.name}_sequencer sqr;
	${module}_${agent.name}_driver drv;
	${module}_${agent.name}_monitor mon;
	
	//Constructor Function
	function new(string name="${module}_${agent.name}_agent",uvm_component parent=null);
		super.new(name,parent);
	endfunction
	
	//Phase Methods
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual function void connect_phase(uvm_phase phase);
	extern virtual task run_phase(uvm_phase phase);
	
	{{method}}
	// Add user method here
	// e.g. task function
	// User method ends
endclass

function void ${module}_${agent.name}_agent::build_phase(uvm_phase phase);
	super.build_phase(phase);
	`uvm_info(get_name(),"Build Phase is Called",UVM_LOW)
	if(!uvm_config_db#(${agent.name}_agent_config)::get(this,"","agt_cfg",agt_cfg))
	begin
		`uvm_fatal(get_name(),"Failed Get ${agent.name} Agent Config")
	end
	if(!uvm_config_db#(virtual ${module}_${agent.name}_inf)::get(this,"","${agent.name}_inf",${agent.name}_inf))
	begin
		`uvm_fatal(get_name(),"Failed Get Virtual Interfac ${module}_${agent.name}_inf")
	end
	mon=${module}_${agent.name}_monitor::type_id::create("mon",this);
	mon.moi_cfg=agt_cfg.moi_cfg;
	if (agt_cfg.is_active==UVM_ACTIVE)
	begin
		sqr=${module}_${agent.name}_sequencer::type_id::create("sqr",this);
		sqr.sqr_cfg=agt_cfg.sqr_cfg;
		drv=${module}_${agent.name}_driver::type_id::create("${agent.name}_drv",this);
		drv.drv_cfg=agt_cfg.drv_cfg;
	end
	
	// Add user build here
	//e.g. TLM build
	// User build ends
endfunction

function void ${module}_${agent.name}_agent::connect_phase(uvm_phase phase);
	super.connect_phase(phase);
	`uvm_info(get_name(),"Connect Phase is Called",UVM_LOW)
	mon.${agent.name}_inf=${agent.name}_inf;
	mon_ap=${agent.name}_mom.mon_ap;
	if (agt_cfg.is_active==UVM_ACTIVE)
	begin
		drv.${agent.name}_inf=${agent.name}_inf;
		
		drv.seq_item_port.connect(${agent.name}_sqr.seq_item_export);
	end
	{{connect_phase}}
	// Add user connect here
	//e.g. TLM  interface connect
	// User connect ends
endfunction

task ${module}_${agent.name}_agent::run_phase(uvm_phase phase);
	super.run_phase(phase);
	`uvm_info(get_name(),"Run Phase is Called",UVM_LOW)

    forever begin
        @(negedge mon.vif.rst_n);
	    if(drv.is_active == 1)begin
	        drv.handle_reset(phase);
	    end
        if(sqr != null)begin
            sqr.handle_reset(phase)
        end
        @(posedge mon.vif.rst_n)

	// Add user logic here

	// User logic ends
endtask



	
	
	